# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOperator(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def OperatorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # Operator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Operator
    def OpcodeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Operator
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Operator
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Operator
    def BuiltinOptionsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Operator
    def CustomOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def CustomOptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Operator
    def CustomOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def CustomOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Operator
    def CustomOptionsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def MutatingVariableInputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def MutatingVariableInputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Operator
    def MutatingVariableInputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def MutatingVariableInputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Operator
    def Intermediates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def IntermediatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def IntermediatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def IntermediatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def OperatorStart(builder): builder.StartObject(9)
def OperatorAddOpcodeIndex(builder, opcodeIndex): builder.PrependUint32Slot(0, opcodeIndex, 0)
def OperatorAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def OperatorStartInputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorAddOutputs(builder, outputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)
def OperatorStartOutputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorAddBuiltinOptionsType(builder, builtinOptionsType): builder.PrependUint8Slot(3, builtinOptionsType, 0)
def OperatorAddBuiltinOptions(builder, builtinOptions): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions), 0)
def OperatorAddCustomOptions(builder, customOptions): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(customOptions), 0)
def OperatorStartCustomOptionsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorAddCustomOptionsFormat(builder, customOptionsFormat): builder.PrependInt8Slot(6, customOptionsFormat, 0)
def OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mutatingVariableInputs), 0)
def OperatorStartMutatingVariableInputsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorAddIntermediates(builder, intermediates): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(intermediates), 0)
def OperatorStartIntermediatesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorEnd(builder): return builder.EndObject()

import tflite_model.AbsOptions
import tflite_model.AddNOptions
import tflite_model.AddOptions
import tflite_model.ArgMaxOptions
import tflite_model.ArgMinOptions
import tflite_model.BatchMatMulOptions
import tflite_model.BatchToSpaceNDOptions
import tflite_model.BidirectionalSequenceLSTMOptions
import tflite_model.BidirectionalSequenceRNNOptions
import tflite_model.BuiltinOptions
import tflite_model.CallOptions
import tflite_model.CastOptions
import tflite_model.ConcatEmbeddingsOptions
import tflite_model.ConcatenationOptions
import tflite_model.Conv2DOptions
import tflite_model.CosOptions
import tflite_model.DensifyOptions
import tflite_model.DepthToSpaceOptions
import tflite_model.DepthwiseConv2DOptions
import tflite_model.DequantizeOptions
import tflite_model.DivOptions
import tflite_model.EmbeddingLookupSparseOptions
import tflite_model.EqualOptions
import tflite_model.ExpOptions
import tflite_model.ExpandDimsOptions
import tflite_model.FakeQuantOptions
import tflite_model.FillOptions
import tflite_model.FloorDivOptions
import tflite_model.FloorModOptions
import tflite_model.FullyConnectedOptions
import tflite_model.GatherNdOptions
import tflite_model.GatherOptions
import tflite_model.GreaterEqualOptions
import tflite_model.GreaterOptions
import tflite_model.HardSwishOptions
import tflite_model.IfOptions
import tflite_model.L2NormOptions
import tflite_model.LSHProjectionOptions
import tflite_model.LSTMOptions
import tflite_model.LeakyReluOptions
import tflite_model.LessEqualOptions
import tflite_model.LessOptions
import tflite_model.LocalResponseNormalizationOptions
import tflite_model.LogSoftmaxOptions
import tflite_model.LogicalAndOptions
import tflite_model.LogicalNotOptions
import tflite_model.LogicalOrOptions
import tflite_model.MatrixDiagOptions
import tflite_model.MatrixSetDiagOptions
import tflite_model.MaximumMinimumOptions
import tflite_model.MirrorPadOptions
import tflite_model.MulOptions
import tflite_model.NegOptions
import tflite_model.NonMaxSuppressionV4Options
import tflite_model.NonMaxSuppressionV5Options
import tflite_model.NotEqualOptions
import tflite_model.OneHotOptions
import tflite_model.PackOptions
import tflite_model.PadOptions
import tflite_model.PadV2Options
import tflite_model.Pool2DOptions
import tflite_model.PowOptions
import tflite_model.QuantizeOptions
import tflite_model.RNNOptions
import tflite_model.RangeOptions
import tflite_model.RankOptions
import tflite_model.ReducerOptions
import tflite_model.ReshapeOptions
import tflite_model.ResizeBilinearOptions
import tflite_model.ResizeNearestNeighborOptions
import tflite_model.ReverseSequenceOptions
import tflite_model.ReverseV2Options
import tflite_model.SVDFOptions
import tflite_model.ScatterNdOptions
import tflite_model.SegmentSumOptions
import tflite_model.SelectOptions
import tflite_model.SelectV2Options
import tflite_model.SequenceRNNOptions
import tflite_model.ShapeOptions
import tflite_model.SkipGramOptions
import tflite_model.SliceOptions
import tflite_model.SoftmaxOptions
import tflite_model.SpaceToBatchNDOptions
import tflite_model.SpaceToDepthOptions
import tflite_model.SparseToDenseOptions
import tflite_model.SplitOptions
import tflite_model.SplitVOptions
import tflite_model.SquareOptions
import tflite_model.SquaredDifferenceOptions
import tflite_model.SqueezeOptions
import tflite_model.StridedSliceOptions
import tflite_model.SubOptions
import tflite_model.TileOptions
import tflite_model.TopKV2Options
import tflite_model.TransposeConvOptions
import tflite_model.TransposeOptions
import tflite_model.UnidirectionalSequenceLSTMOptions
import tflite_model.UniqueOptions
import tflite_model.UnpackOptions
import tflite_model.WhereOptions
import tflite_model.WhileOptions
import tflite_model.ZerosLikeOptions
try:
    from typing import List, Union
except:
    pass

class OperatorT(object):

    # OperatorT
    def __init__(self):
        self.opcodeIndex = 0  # type: int
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.builtinOptionsType = 0  # type: int
        self.builtinOptions = None  # type: Union[None, tflite_model.Conv2DOptions.Conv2DOptionsT, tflite_model.DepthwiseConv2DOptions.DepthwiseConv2DOptionsT, tflite_model.ConcatEmbeddingsOptions.ConcatEmbeddingsOptionsT, tflite_model.LSHProjectionOptions.LSHProjectionOptionsT, tflite_model.Pool2DOptions.Pool2DOptionsT, tflite_model.SVDFOptions.SVDFOptionsT, tflite_model.RNNOptions.RNNOptionsT, tflite_model.FullyConnectedOptions.FullyConnectedOptionsT, tflite_model.SoftmaxOptions.SoftmaxOptionsT, tflite_model.ConcatenationOptions.ConcatenationOptionsT, tflite_model.AddOptions.AddOptionsT, tflite_model.L2NormOptions.L2NormOptionsT, tflite_model.LocalResponseNormalizationOptions.LocalResponseNormalizationOptionsT, tflite_model.LSTMOptions.LSTMOptionsT, tflite_model.ResizeBilinearOptions.ResizeBilinearOptionsT, tflite_model.CallOptions.CallOptionsT, tflite_model.ReshapeOptions.ReshapeOptionsT, tflite_model.SkipGramOptions.SkipGramOptionsT, tflite_model.SpaceToDepthOptions.SpaceToDepthOptionsT, tflite_model.EmbeddingLookupSparseOptions.EmbeddingLookupSparseOptionsT, tflite_model.MulOptions.MulOptionsT, tflite_model.PadOptions.PadOptionsT, tflite_model.GatherOptions.GatherOptionsT, tflite_model.BatchToSpaceNDOptions.BatchToSpaceNDOptionsT, tflite_model.SpaceToBatchNDOptions.SpaceToBatchNDOptionsT, tflite_model.TransposeOptions.TransposeOptionsT, tflite_model.ReducerOptions.ReducerOptionsT, tflite_model.SubOptions.SubOptionsT, tflite_model.DivOptions.DivOptionsT, tflite_model.SqueezeOptions.SqueezeOptionsT, tflite_model.SequenceRNNOptions.SequenceRNNOptionsT, tflite_model.StridedSliceOptions.StridedSliceOptionsT, tflite_model.ExpOptions.ExpOptionsT, tflite_model.TopKV2Options.TopKV2OptionsT, tflite_model.SplitOptions.SplitOptionsT, tflite_model.LogSoftmaxOptions.LogSoftmaxOptionsT, tflite_model.CastOptions.CastOptionsT, tflite_model.DequantizeOptions.DequantizeOptionsT, tflite_model.MaximumMinimumOptions.MaximumMinimumOptionsT, tflite_model.ArgMaxOptions.ArgMaxOptionsT, tflite_model.LessOptions.LessOptionsT, tflite_model.NegOptions.NegOptionsT, tflite_model.PadV2Options.PadV2OptionsT, tflite_model.GreaterOptions.GreaterOptionsT, tflite_model.GreaterEqualOptions.GreaterEqualOptionsT, tflite_model.LessEqualOptions.LessEqualOptionsT, tflite_model.SelectOptions.SelectOptionsT, tflite_model.SliceOptions.SliceOptionsT, tflite_model.TransposeConvOptions.TransposeConvOptionsT, tflite_model.SparseToDenseOptions.SparseToDenseOptionsT, tflite_model.TileOptions.TileOptionsT, tflite_model.ExpandDimsOptions.ExpandDimsOptionsT, tflite_model.EqualOptions.EqualOptionsT, tflite_model.NotEqualOptions.NotEqualOptionsT, tflite_model.ShapeOptions.ShapeOptionsT, tflite_model.PowOptions.PowOptionsT, tflite_model.ArgMinOptions.ArgMinOptionsT, tflite_model.FakeQuantOptions.FakeQuantOptionsT, tflite_model.PackOptions.PackOptionsT, tflite_model.LogicalOrOptions.LogicalOrOptionsT, tflite_model.OneHotOptions.OneHotOptionsT, tflite_model.LogicalAndOptions.LogicalAndOptionsT, tflite_model.LogicalNotOptions.LogicalNotOptionsT, tflite_model.UnpackOptions.UnpackOptionsT, tflite_model.FloorDivOptions.FloorDivOptionsT, tflite_model.SquareOptions.SquareOptionsT, tflite_model.ZerosLikeOptions.ZerosLikeOptionsT, tflite_model.FillOptions.FillOptionsT, tflite_model.BidirectionalSequenceLSTMOptions.BidirectionalSequenceLSTMOptionsT, tflite_model.BidirectionalSequenceRNNOptions.BidirectionalSequenceRNNOptionsT, tflite_model.UnidirectionalSequenceLSTMOptions.UnidirectionalSequenceLSTMOptionsT, tflite_model.FloorModOptions.FloorModOptionsT, tflite_model.RangeOptions.RangeOptionsT, tflite_model.ResizeNearestNeighborOptions.ResizeNearestNeighborOptionsT, tflite_model.LeakyReluOptions.LeakyReluOptionsT, tflite_model.SquaredDifferenceOptions.SquaredDifferenceOptionsT, tflite_model.MirrorPadOptions.MirrorPadOptionsT, tflite_model.AbsOptions.AbsOptionsT, tflite_model.SplitVOptions.SplitVOptionsT, tflite_model.UniqueOptions.UniqueOptionsT, tflite_model.ReverseV2Options.ReverseV2OptionsT, tflite_model.AddNOptions.AddNOptionsT, tflite_model.GatherNdOptions.GatherNdOptionsT, tflite_model.CosOptions.CosOptionsT, tflite_model.WhereOptions.WhereOptionsT, tflite_model.RankOptions.RankOptionsT, tflite_model.ReverseSequenceOptions.ReverseSequenceOptionsT, tflite_model.MatrixDiagOptions.MatrixDiagOptionsT, tflite_model.QuantizeOptions.QuantizeOptionsT, tflite_model.MatrixSetDiagOptions.MatrixSetDiagOptionsT, tflite_model.HardSwishOptions.HardSwishOptionsT, tflite_model.IfOptions.IfOptionsT, tflite_model.WhileOptions.WhileOptionsT, tflite_model.DepthToSpaceOptions.DepthToSpaceOptionsT, tflite_model.NonMaxSuppressionV4Options.NonMaxSuppressionV4OptionsT, tflite_model.NonMaxSuppressionV5Options.NonMaxSuppressionV5OptionsT, tflite_model.ScatterNdOptions.ScatterNdOptionsT, tflite_model.SelectV2Options.SelectV2OptionsT, tflite_model.DensifyOptions.DensifyOptionsT, tflite_model.SegmentSumOptions.SegmentSumOptionsT, tflite_model.BatchMatMulOptions.BatchMatMulOptionsT]
        self.customOptions = None  # type: List[int]
        self.customOptionsFormat = 0  # type: int
        self.mutatingVariableInputs = None  # type: List[bool]
        self.intermediates = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operator = Operator()
        operator.Init(buf, pos)
        return cls.InitFromObj(operator)

    @classmethod
    def InitFromObj(cls, operator):
        x = OperatorT()
        x._UnPack(operator)
        return x

    # OperatorT
    def _UnPack(self, operator):
        if operator is None:
            return
        self.opcodeIndex = operator.OpcodeIndex()
        if not operator.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(operator.InputsLength()):
                    self.inputs.append(operator.Inputs(i))
            else:
                self.inputs = operator.InputsAsNumpy()
        if not operator.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(operator.OutputsLength()):
                    self.outputs.append(operator.Outputs(i))
            else:
                self.outputs = operator.OutputsAsNumpy()
        self.builtinOptionsType = operator.BuiltinOptionsType()
        self.builtinOptions = tflite_model.BuiltinOptions.BuiltinOptionsCreator(self.builtinOptionsType, operator.BuiltinOptions())
        if not operator.CustomOptionsIsNone():
            if np is None:
                self.customOptions = []
                for i in range(operator.CustomOptionsLength()):
                    self.customOptions.append(operator.CustomOptions(i))
            else:
                self.customOptions = operator.CustomOptionsAsNumpy()
        self.customOptionsFormat = operator.CustomOptionsFormat()
        if not operator.MutatingVariableInputsIsNone():
            if np is None:
                self.mutatingVariableInputs = []
                for i in range(operator.MutatingVariableInputsLength()):
                    self.mutatingVariableInputs.append(operator.MutatingVariableInputs(i))
            else:
                self.mutatingVariableInputs = operator.MutatingVariableInputsAsNumpy()
        if not operator.IntermediatesIsNone():
            if np is None:
                self.intermediates = []
                for i in range(operator.IntermediatesLength()):
                    self.intermediates.append(operator.Intermediates(i))
            else:
                self.intermediates = operator.IntermediatesAsNumpy()

    # OperatorT
    def Pack(self, builder):
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                OperatorStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependInt32(self.inputs[i])
                inputs = builder.EndVector(len(self.inputs))
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                OperatorStartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependInt32(self.outputs[i])
                outputs = builder.EndVector(len(self.outputs))
        if self.builtinOptions is not None:
            builtinOptions = self.builtinOptions.Pack(builder)
        if self.customOptions is not None:
            if np is not None and type(self.customOptions) is np.ndarray:
                customOptions = builder.CreateNumpyVector(self.customOptions)
            else:
                OperatorStartCustomOptionsVector(builder, len(self.customOptions))
                for i in reversed(range(len(self.customOptions))):
                    builder.PrependUint8(self.customOptions[i])
                customOptions = builder.EndVector(len(self.customOptions))
        if self.mutatingVariableInputs is not None:
            if np is not None and type(self.mutatingVariableInputs) is np.ndarray:
                mutatingVariableInputs = builder.CreateNumpyVector(self.mutatingVariableInputs)
            else:
                OperatorStartMutatingVariableInputsVector(builder, len(self.mutatingVariableInputs))
                for i in reversed(range(len(self.mutatingVariableInputs))):
                    builder.PrependBool(self.mutatingVariableInputs[i])
                mutatingVariableInputs = builder.EndVector(len(self.mutatingVariableInputs))
        if self.intermediates is not None:
            if np is not None and type(self.intermediates) is np.ndarray:
                intermediates = builder.CreateNumpyVector(self.intermediates)
            else:
                OperatorStartIntermediatesVector(builder, len(self.intermediates))
                for i in reversed(range(len(self.intermediates))):
                    builder.PrependInt32(self.intermediates[i])
                intermediates = builder.EndVector(len(self.intermediates))
        OperatorStart(builder)
        OperatorAddOpcodeIndex(builder, self.opcodeIndex)
        if self.inputs is not None:
            OperatorAddInputs(builder, inputs)
        if self.outputs is not None:
            OperatorAddOutputs(builder, outputs)
        OperatorAddBuiltinOptionsType(builder, self.builtinOptionsType)
        if self.builtinOptions is not None:
            OperatorAddBuiltinOptions(builder, builtinOptions)
        if self.customOptions is not None:
            OperatorAddCustomOptions(builder, customOptions)
        OperatorAddCustomOptionsFormat(builder, self.customOptionsFormat)
        if self.mutatingVariableInputs is not None:
            OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)
        if self.intermediates is not None:
            OperatorAddIntermediates(builder, intermediates)
        operator = OperatorEnd(builder)
        return operator
